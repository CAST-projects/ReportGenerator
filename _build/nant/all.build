<?xml version="1.0" encoding="utf-8"?>
<!--
£ $HeadURL: svn://gargantua/DEV/branches/7.0.11/_build/nant/all.build $ £
£ $Id: all.build 45677 2010-10-06 09:23:24Z YLE $ £
£ Creation date : 2010.05.29                                                  £
£ Creator : YLE@CAST                                                          £
£ Authors : YLE@CAST                                                          £
£ What it is : NAnt build file used to build all the Visual Studio .NET       £
£ projects.                                                                   £
-->

<!-- 
    Required properties :
        workspace_dir : the workspace directory aka the value of the environment
                        variable CAIP_ROOT_DIR (or WORKSPACE).
        include_file : the file containing the list of projects to build.
        use_msbuild : 'true' or 'false' whether we use msbuild to build the projects
-->

<project name="CAST" default="all" basedir="." xmlns="http://nant.sf.net/release/0.90/nant.xsd">
   
    <property name="temp_path" value="${project::get-base-directory()}/.temp" overwrite="false"/>
    <property name="bin_dir" value="${project::get-base-directory()}/bin" overwrite="false"/>

    <property name="rooted_bin_dir" overwrite="true" if="${path::is-path-rooted(bin_dir)}" value="${bin_dir}"/>
    <property name="rooted_bin_dir" overwrite="true" unless="${path::is-path-rooted(bin_dir)}" value="${project::get-base-directory()}/${bin_dir}"/>

    <target name="all" depends="build_projects_list"/>

    <target name="init">
        <mkdir dir="${path::combine(workspace_dir,'SRC\Debug')}" if="${use_msbuild and directory::exists(path::combine(workspace_dir,'SRC'))}"
                                                unless="${directory::exists(path::combine(workspace_dir,'SRC\Debug'))}"/>
        <mkdir dir="${path::combine(workspace_dir,'SRC\Release')}" if="${use_msbuild and directory::exists(path::combine(workspace_dir,'SRC'))}"
                                                unless="${directory::exists(path::combine(workspace_dir,'SRC\Release'))}"/>
    </target>
    
    <target name="clean_temp" depends="init">
        <delete>
            <fileset>
                <include name="${temp_path}/*.build"/>
                <include name="${temp_path}/*.depends.xml"/>
                <include name="${temp_path}/*.depends"/>
            </fileset>
        </delete>
    </target>

    <target name="build_projects_list" depends="clean_temp">
        <!-- Retrieve the VS projects list -->
        <fileset id="raw_projects_list" basedir="${workspace_dir}">
            <includesfile name="${include_file}"/>
        </fileset>

        <!-- step (i): 
        £    - convert the VS projects to NAnt build files and
        £    - generate the '.depends' filescontaining the dependencies info.
        -->
        <foreach item="File" property="project_file">
            <in>
                <items refid="raw_projects_list"/>
            </in>
            <do>
                <property name="build_file" value="${temp_path}/${path::get-file-name-without-extension(project_file)}.build"/>
                <nant buildfile="vsprojconvert.build" inheritall="false">
                    <properties>
                        <property name="input_path" value="${project_file}"/>
                        <property name="output_path" value="${build_file}"/>
                        <property name="bin_dir" value="${rooted_bin_dir}"/>
                    </properties>
                </nant>
                <style style="vsprojdepends.xsl"
                       in="${build_file}" 
                       extension="depends"
                       destdir="${temp_path}">
                </style>
            </do>
        </foreach>
        
        <!-- step (ii) : Generate a file containing all the dependencies -->
        <property name="all_depends_file" value="${temp_path}/all.depends.xml"/>
        <echo message="&lt;?xml version='1.0' encoding='utf-8'?&gt;" file="${all_depends_file}"/>
        <echo file="${all_depends_file}" append="true">
            &lt;projects&gt;
            &lt;/projects&gt;
        </echo>
        <!-- Append the content of *.depends to all.depends -->
        <foreach item="File" property="depends_file">
            <in>
                <items>
                    <include name="${temp_path}/*.depends"/>
                    <exclude name="${all_depends_file}"/>
                </items>
            </in>
            <do>
                <property name="xmlnodes" value=""/>
                <xmlpeek xpath="//projects" file="${all_depends_file}" property="xmlnodes" verbose="true"/>
                <property name="current_depends" value=""/>
                <xmlpeek xpath="/project_dependencies" file="${depends_file}" property="current_depends" verbose="true"/>
                <xmlpoke xpath="//projects" file="${all_depends_file}" value="${xmlnodes}${current_depends}" verbose="true"/>
            </do>
        </foreach>

        <!-- step (iii) : Run the topologic sorter -->
        <loadtasks assembly="bin/CAST.NAnt.CustomTasks.dll"/>

        <fileset id="sorted_build_files" failonempty="false"/>
        <projectstopologicsorter dependsfile="${all_depends_file}" buildfilesdir="${temp_path}">
            <sortedbuildfiles refid="sorted_build_files"/>
        </projectstopologicsorter>

        <!-- step (iv) : Now that the projects are sorted with respect to the dependencies build them
             . If use_msbuild is true we do not use the generate NAnt build files to run the build
               we use them just to get the paths of the projects to build in order using msbuild.
             . Otherwise we simply run the build using the generated NAnt build files.
        -->
        <foreach item="File" property="project_build_file">
            <in>
                <items refid="sorted_build_files"/>
            </in>
            <do>
                <!-- Where we simply invoke NAnt with the generated build file -->
                <if test="${not use_msbuild}">  <!-- must be the negation of the test in the following if -->
                    <nant buildfile="${project_build_file}"/>
                </if>

                <!-- Where we invoke MSBuild with project file -->
                <if test="${use_msbuild}">      <!-- must be the negation of the test in the previous if -->
                    <!-- Get the project's full path from the generated NAnt build file -->
                    <property name="project_full_path" value=""/>
                    <xmlpeek xpath="/na:project/na:property[@name = 'project_full_path']/@value"  file="${project_build_file}"  property="project_full_path" verbose="true">
                        <namespaces>
                            <namespace prefix="na" uri="http://nant.sf.net/release/0.90/nant.xsd" />
                        </namespaces>
                    </xmlpeek>
                    <property name="assembly_file_name" value=""/>
                    <xmlpeek xpath="/na:project/na:property[@name = 'assembly_file_name']/@value" file="${project_build_file}" property="assembly_file_name" verbose="true">
                        <namespaces>
                            <namespace prefix="na" uri="http://nant.sf.net/release/0.90/nant.xsd" />
                        </namespaces>
                    </xmlpeek>

                    <echo message="Building project ${project_full_path}"/>

                    <!-- invoke MSBuild on the project -->
                    <exec program="${framework::get-framework-directory(framework::get-target-framework())}\MSBuild.exe" failonerror="true">
                        <environment>
                            <variable name="CAIP_ROOT_DIR" value="${workspace_dir}"/>
                        </environment>
                        <arg value="${project_full_path}"/>
                        <arg value="/p:Configuration=Debug"/>
                    </exec>
                    <exec program="${framework::get-framework-directory(framework::get-target-framework())}\MSBuild.exe" failonerror="true">
                        <environment>
                            <variable name="CAIP_ROOT_DIR" value="${workspace_dir}"/>
                        </environment>
                        <arg value="${project_full_path}"/>
                        <arg value="/p:Configuration=Release"/>
                    </exec>

                    <!-- Copy the output files to the binaries folder -->
                    <copy file="${path::get-directory-name(project_full_path)}\bin\debug\${assembly_file_name}"
                            todir="${rooted_bin_dir}\debug"/>
                    <copy file="${path::get-directory-name(project_full_path)}\bin\release\${assembly_file_name}"
                            todir="${rooted_bin_dir}\release"/>
                </if>
            </do>
        </foreach>

    </target>

</project>

